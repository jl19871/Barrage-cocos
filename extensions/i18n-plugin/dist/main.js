"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.methods = exports.langJson = exports.curLang = exports.langMap = void 0;
exports.load = load;
exports.unload = unload;
exports.getLangFolderUUID = getLangFolderUUID;
exports.getSelectedLang = getSelectedLang;
exports.checkFolder = checkFolder;
exports.setLang = setLang;
exports.createFolders = createFolders;
// @ts-ignore
const fs_1 = require("fs");
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const package_json_1 = __importDefault(require("../package.json"));
exports.langMap = {};
exports.curLang = "";
exports.langJson = {};
/**
 * @en Registration method for the main process of Extension
 * @zh 为扩展的主进程的注册方法
 */
exports.methods = {
    /**
     * @en A method that can be triggered by message
     * @zh 通过 message 触发的方法
     */
    openPanel() {
        Editor.Panel.open(package_json_1.default.name);
    },
    refreshLang() {
        checkFolder().then(([code, msg]) => {
            setLang(exports.curLang);
        });
    },
    getLangStr(tid) {
        const [id, ...args] = tid.split(",");
        if (exports.langJson == null) {
            return tid;
        }
        let str = exports.langJson[id];
        if (!str) {
            return tid;
        }
        args.forEach((arg, index) => {
            // str = str.replace("${p" + (index + 1) + "}", arg);
            let g = "\\${p" + (index + 1) + "}";
            let reg = new RegExp(g, "g");
            str = str.replace(reg, arg);
        });
        return str;
    },
    async getLangFolderUUID(url = "") {
        return getLangFolderUUID(url);
    },
    async checkFolder(uuid = "") {
        return checkFolder(uuid);
    },
    async setLang(lang) {
        return setLang(lang);
    },
    getLang() {
        return exports.curLang;
    },
    getLangJson() {
        return exports.langJson;
    },
    getCurLang() {
        return exports.curLang;
    },
    getLangMap() {
        return exports.langMap;
    },
    createFolders() {
        return createFolders();
    }
};
/**
 * @en Method Triggered on Extension Startup
 * @zh 扩展启动时触发的方法
 */
async function load() {
    await getSelectedLang();
    const url = await Editor.Profile.getProject('i18n-plugin', 'langFolder');
    if (url == undefined) {
        Editor.Dialog.warn("请先选择语言目录", {
            buttons: ["确定"],
        });
        exports.methods.openPanel();
    }
    else {
        await checkFolder();
        await setLang(exports.curLang);
    }
}
/**
 * @en Method triggered when uninstalling the extension
 * @zh 卸载扩展时触发的方法
 */
function unload() { }
async function getLangFolderUUID(url = "") {
    if (url == "") {
        url = await Editor.Profile.getProject('i18n-plugin', 'langFolder');
    }
    if (url == undefined || url == null || url == "") {
        return "";
    }
    let uuid = await Editor.Message.request('asset-db', 'query-uuid', url);
    if (uuid == null) {
        return "";
    }
    return uuid;
}
async function getSelectedLang() {
    exports.curLang = await Editor.Profile.getProject('i18n-plugin', 'curLang');
}
async function checkFolder(uuid = "") {
    if (uuid == "-1") {
        Editor.Profile.setProject('i18n-plugin', 'langFolder', "");
        return [1, "未获取到 UUID"];
    }
    if (uuid == "") {
        uuid = await getLangFolderUUID();
    }
    if (uuid == "") {
        return [1, "未获取到 UUID"];
    }
    // 获取路径
    const info = await Editor.Message.request('asset-db', 'query-asset-info', uuid);
    if (info == null) {
        console.warn('未获取到路径');
        return [2, "未获取到路径"];
    }
    if (info.isDirectory == false) {
        Editor.Dialog.warn('请选择一个文件夹');
        // await refreshFolder(false);
        return [3, "请选择一个文件夹"];
    }
    const url = info.url;
    exports.langMap = {};
    const folders = await Editor.Message.request('asset-db', 'query-assets', {
        pattern: `${url}/*`
    });
    if (folders.length <= 0) {
        return [4, "未获取到语言包"];
    }
    for (const folder of folders) {
        if (folder.isDirectory) {
            const langCode = folder.name;
            const jsonUrl = `${folder.url}/i18n.json`;
            const jsonUUid = await Editor.Message.request('asset-db', 'query-uuid', jsonUrl);
            if (jsonUUid != null && jsonUUid != undefined && jsonUUid != '') {
                // @ts-ignore
                exports.langMap[langCode] = jsonUrl;
            }
        }
    }
    Editor.Profile.setProject('i18n-plugin', 'langFolder', url);
    if (Object.keys(exports.langMap).length <= 0) {
        return [5, "没有获取到配置"];
    }
    else {
        if (exports.curLang == "" || exports.curLang == undefined) {
            exports.curLang = Object.keys(exports.langMap)[0];
        }
        setLang(exports.curLang);
        return [0, "获取语言包成功"];
    }
}
async function setLang(lang) {
    //@ts-ignore
    const jsonUrl = exports.langMap[lang];
    if (jsonUrl == undefined) {
        return [1, "未获取到语言包"];
    }
    try {
        const nativeUrl = await Editor.Message.request('asset-db', 'query-path', jsonUrl);
        const file = (0, fs_1.readFileSync)(nativeUrl, 'utf-8');
        const json = JSON.parse(file);
        exports.curLang = lang;
        exports.langJson = json;
        await Editor.Message.request('scene', 'soft-reload');
        // 显示 key-value
        const result = Object.entries(json)
            .map(([k, v]) => `${k}: ${v}`)
            .join('<br>');
        return [0, `<b>${lang}</b> 的翻译内容：<br>${result}`];
    }
    catch (e) {
        return [2, `❌ 加载 ${lang} 的 i18n.json 失败`];
    }
}
async function createFolders() {
    const uuids = Editor.Selection.getSelected("asset");
    if (uuids.length <= 0) {
        Editor.Dialog.warn("请先选择一个文件夹", {
            buttons: ["确定"],
        });
        return;
    }
    const uuid = uuids[0];
    const info = await Editor.Message.request('asset-db', 'query-asset-info', uuid);
    if ((info === null || info === void 0 ? void 0 : info.isDirectory) === false) {
        Editor.Dialog.warn("请选择一个文件夹", {
            buttons: ["确定"],
        });
        return;
    }
    // console.log("创建语言包文件夹", info);
    const rootDir = info === null || info === void 0 ? void 0 : info.file;
    // console.log("创建语言包文件夹根目录", rootDir);
    const result = await Editor.Dialog.info("是否在当前目录下\n" + (info === null || info === void 0 ? void 0 : info.name) + "\n创建多语言目录", {
        buttons: ["确定", "取消"],
    });
    if (result.response !== 0)
        return;
    const langs = ['zh'];
    const subDirs = ['font', 'img'];
    for (const lang of langs) {
        // @ts-ignore
        const langPath = (0, path_1.join)(rootDir, 'lang', lang);
        for (const sub of subDirs) {
            const path = (0, path_1.join)(langPath, sub);
            (0, fs_extra_1.ensureDirSync)(path);
            console.log(`创建子目录: ${path}`);
        }
        // 创建 i18n.json
        const i18nPath = (0, path_1.join)(langPath, 'i18n.json');
        console.log(`创建 i18n.json: ${i18nPath}`);
        (0, fs_extra_1.writeJsonSync)(i18nPath, { "TID_TEST1": "测试1" }, { spaces: 2 });
        Editor.Message.request('asset-db', 'refresh-asset', langPath);
    }
}
//# sourceMappingURL=data:application/json;base64,